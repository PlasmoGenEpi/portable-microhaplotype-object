# metamodel_version: 1.7.0
type BioinformaticsMethodInfo
  {
    demultiplexingMethod: BioMethod!
    denoisingMethod: BioMethod!
    additionalMethods: [BioMethod]
    bioinformaticsMethodName: String
  }

type BioinformaticsRunInfo
  {
    bioinformaticsMethodsId: Integer!
    runDate: String!
    bioinformaticsRunName: String
  }

type BioMethod
  {
    programVersion: String!
    program: String!
    programDescription: String
    additionalArgument: [String]
  }

type ExperimentInfo
  {
    sequencingInfoId: Integer!
    plateName: String
    plateRow: String
    plateCol: Integer
    specimenId: Integer!
    panelId: Integer!
    accession: String
    experimentSampleName: String!
  }

type GenomeInfo
  {
    name: String!
    genomeVersion: String!
    taxonId: Integer!
    url: String!
    chromosomes: [String]
    gffUrl: String
  }

type GenomicLocation
  {
    genomeId: Integer!
    chrom: String!
    start: Integer!
    end: Integer!
    strand: String
    refSeq: String
  }

type MarkerOfInterest
  {
    markerLocation: GenomicLocation
    associations: [String]
  }

type MaskingInfo
  {
    seqStart: Integer!
    seqSegmentSize: Integer!
    replacementSize: Integer!
  }

type MicrohaplotypeForTarget
  {
    mhapId: Integer!
    reads: Integer!
    umis: Integer
  }

type MicrohaplotypesDetected
  {
    bioinformaticsRunId: Integer!
    experimentSamples: [MicrohaplotypesForSample]!
  }

type MicrohaplotypesForSample
  {
    experimentSampleId: Integer!
    targetResults: [MicrohaplotypesForTarget]!
  }

type MicrohaplotypesForTarget
  {
    mhapsTargetId: Integer!
    haps: [MicrohaplotypeForTarget]!
  }

type PanelInfo
  {
    reactions: [ReactionInfo]!
    panelName: String!
  }

type ParasiteDensity
  {
    method: String!
    density: Double!
  }

type PmoGenerationMethod
  {
    programVersion: String!
    programName: String!
  }

type PmoHeader
  {
    pmoVersion: String!
    creationDate: String
    generationMethod: PmoGenerationMethod
  }

type PortableMicrohaplotypeObject
  {
    experimentInfo: [ExperimentInfo]!
    specimenInfo: [SpecimenInfo]!
    sequencingInfo: [SequencingInfo]!
    panelInfo: [PanelInfo]!
    targetInfo: [TargetInfo]!
    targetedGenomes: [GenomeInfo]!
    microhaplotypesInfo: RepresentativeMicrohaplotypes!
    bioinformaticsMethodsInfo: [BioinformaticsMethodInfo]!
    bioinformaticsRunInfo: [BioinformaticsRunInfo]!
    microhaplotypesDetected: [MicrohaplotypesDetected]!
    pmoHeader: PmoHeader!
    readCountsByStage: [ReadCountsByStage]
  }

type PrimerInfo
  {
    seq: String!
    location: GenomicLocation
  }

type ReactionInfo
  {
    panelTargets: [Integer]!
    reactionName: String!
  }

type ReadCountsByStage
  {
    bioinformaticsRunId: Integer!
    readCountsByExperimentalSampleByStage: [ReadCountsByStageForExperimentalSample]!
  }

type ReadCountsByStageForExperimentalSample
  {
    experimentSampleId: Integer!
    totalRawCount: Integer!
    readCountsForTargets: [ReadCountsByStageForTarget]
  }

type ReadCountsByStageForTarget
  {
    targetId: Integer!
    stages: [StageReadCounts]!
  }

type RepresentativeMicrohaplotype
  {
    seq: String!
    microhaplotypeName: String
    quality: String
    pseudocigar: String
    masking: [MaskingInfo]
    altAnnotations: [String]
  }

type RepresentativeMicrohaplotypes
  {
    targets: [RepresentativeMicrohaplotypesForTarget]!
  }

type RepresentativeMicrohaplotypesForTarget
  {
    targetId: Integer!
    microhaplotypes: [RepresentativeMicrohaplotype]!
  }

type SequencingInfo
  {
    sequencingInfoName: String!
    seqInstrument: String!
    seqDate: String!
    nuclAcidExt: String
    nuclAcidAmp: String
    nuclAcidExtDate: String
    nuclAcidAmpDate: String
    pcrCond: String
    libScreen: String
    libLayout: String
    libKit: String
    seqCenter: String
  }

type SpecimenInfo
  {
    plateName: String
    plateRow: String
    plateCol: Integer
    specimenName: String!
    sampTaxonId: Integer!
    individualId: Integer
    hostTaxonId: Integer
    alternateIdentifiers: [String]
    specimenSex: String
    parasiteDensityInfo: [ParasiteDensity]
    collectionDate: String!
    dateOfBirth: String
    collectionCountry: String!
    geoAdmin1: String
    geoAdmin2: String
    geoAdmin3: String
    latLon: String
    collector: String!
    sampStoreLoc: String!
    sampCollectDevice: String!
    projectName: String!
    sampleComments: String
  }

type StageReadCounts
  {
    readCount: Integer!
    stage: String!
  }

type TargetInfo
  {
    targetName: String!
    geneName: String
    insertLocation: GenomicLocation
    forwardPrimers: [PrimerInfo]!
    reversePrimers: [PrimerInfo]!
    targetAttributes: [String]
  }

